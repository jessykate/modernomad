# Generated by Django 4.0.1 on 2022-01-07 09:27

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=50)),
                ('type', models.CharField(choices=[('credit', 'Credit'), ('debit', 'Debit')], default='credit', help_text='A credit (expense, asset) account always has a balance > 0. A debit (revenue, liability) account always has a balance < 0. #helpfulnothelpful.', max_length=32)),
                ('admins', models.ManyToManyField(blank=True, help_text='May be blank', related_name='accounts_administered', to=settings.AUTH_USER_MODEL, verbose_name='Admins (optional)')),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('symbol', models.CharField(max_length=5, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Currencies',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('valid', models.BooleanField(default=False)),
                ('approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='approved_transactions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SystemAccounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='bank.account')),
                ('currency', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bank.currency')),
                ('debit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='bank.account')),
            ],
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField()),
                ('valid', models.BooleanField(default=False)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='bank.account')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='bank.transaction')),
            ],
            options={
                'verbose_name_plural': 'Entries',
                'ordering': ['-transaction__date'],
            },
        ),
        migrations.AddField(
            model_name='account',
            name='currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='bank.currency'),
        ),
        migrations.AddField(
            model_name='account',
            name='owners',
            field=models.ManyToManyField(blank=True, help_text='May be blank for group accounts', related_name='accounts_owned', to=settings.AUTH_USER_MODEL),
        ),
    ]
